{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","value","svalue","arr","AddName","bind","handleChange","handleChangeS","contact","this","toLowerCase","setState","index","length","push","event","target","name","TS","ContactList","filter","includes","map","filteredName","type","onChange","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAEcA,EAAb,kDACG,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAM,GAAIC,OAAO,GAAIC,IAAI,IACxC,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBALJ,EADtB,2CASE,WAEG,IAAMG,EAAQC,KAAKT,MAAMC,MAAMS,cAK/B,GAJAD,KAAKE,SAAS,CACZV,MAAM,KAGK,KAAVO,EAAH,CAIA,IAAK,IAAII,EAAQ,EAAGA,EAAQH,KAAKT,MAAMG,IAAIU,OAAQD,IAG1C,GADAH,KAAKT,MAAMG,IAAIS,GAAOF,cACnBD,KAAKT,MAAMG,IAAIS,KAASJ,EAC3B,OAGDC,KAAKT,MAAMG,IAAIW,KAAKN,MA3BjC,0BAgCC,SAAaO,GACXN,KAAKE,SAAS,CAACV,MAAOc,EAAMC,OAAOf,UAjCtC,2BAoCC,SAAcc,GAGV,IADD,IAAME,EAAMF,EAAMC,OAAOf,MAAMS,cACrBE,EAAQ,EAAGA,EAAQH,KAAKT,MAAMG,IAAIU,OAAQD,IACjDH,KAAKT,MAAMG,IAAIS,GAAOF,cAExBD,KAAKE,SAAS,CAACT,OAAQe,MA1C5B,oBA6CG,WAEE,IAAMC,EAAGT,KAAKT,MACRmB,EAAc,6BACjBD,EAAGf,IAAIiB,QAAO,SAAAH,GAAI,OAAIA,EAAKI,SAASH,EAAGhB,WAASoB,KAAI,SAAAC,GAAY,OACjE,6BACGA,SAKL,OACE,gCACI,2CACA,kDACA,uBAAOC,KAAK,OAAOvB,MAAOiB,EAAGjB,MAAOwB,SAAUhB,KAAKH,eACnD,uBAJJ,IAIW,uBAJX,IAIkB,2CACd,uBAAOkB,KAAK,OAAOvB,MAAOiB,EAAGhB,OAAQuB,SAAUhB,KAAKF,gBACnDY,EACD,yCAAW,iCAASD,EAAGf,IAAIU,YAC3B,wBAAQa,QAASjB,KAAKL,QAAtB,wBAjEX,GAAyBuB,aCUXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aacd9239.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n export class App extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { value:'', svalue:'', arr:[]};\n      this.AddName = this.AddName.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.handleChangeS = this.handleChangeS.bind(this);      \n    }\n      \n   AddName() {\n\n      const contact=this.state.value.toLowerCase();\n      this.setState({          \n        value:''          \n      });\n\n      if(contact===''){\n        return\n      }\n        \n      for (let index = 0; index < this.state.arr.length; index++) {\n                   \n               this.state.arr[index].toLowerCase();\n               if(this.state.arr[index]===contact){\n               return;\n               }  \n          }\n              this.state.arr.push(contact);\n                \n                      \n  } \n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleChangeS(event) {\n    \n     const name= event.target.value.toLowerCase();\n      for (let index = 0; index < this.state.arr.length; index++) {\n        this.state.arr[index].toLowerCase();\n      }\n      this.setState({svalue: name});\n  }\n  \n    render() {\n\n      const TS=this.state;\n      const ContactList = <ol>\n        {TS.arr.filter(name => name.includes(TS.svalue)).map(filteredName => (\n        <li>\n          {filteredName}\n        </li>\n      ))}\n      </ol>;\n\n      return (\n        <div>\n            <h1> Welcome </h1>\n            <label>Add new Name.</label>\n            <input type=\"text\" value={TS.value} onChange={this.handleChange} />\n            <br /> <br /> <label>Search</label>\n            <input type=\"text\" value={TS.svalue} onChange={this.handleChangeS} />\n            {ContactList}\n            <p>Names : <strong>{TS.arr.length}</strong></p>\n            <button onClick={this.AddName}>\n                Add\n            </button> \n        </div>\n        \n      );\n    }\n}\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}